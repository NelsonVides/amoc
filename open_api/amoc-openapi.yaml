openapi: 3.0.1
info:
  title: API-DOCS
  version: 1.0.0
servers:
  - url: /
paths:
  /nodes:
    get:
      tags:
        - node
      description: Pings AMOC nodes from master node.
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                required:
                  - nodes
                type: object
                properties:
                  nodes:
                    type: object
                    additionalProperties:
                      type: string
                      enum:
                        - up
                        - down
                    example:
                      amoc@host1: up
                      amoc@host2: up
  /scenarios:
    get:
      tags:
        - scenarios
      description: Gets list of available scenarios
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                required:
                  - scenarios
                type: object
                properties:
                  scenarios:
                    type: array
                    items:
                      type: string
                    example:
                      - some_scenario
                      - another_scenario
  '/scenarios/{id}':
    get:
      tags:
        - scenario
      description: Gets scenario status
      parameters:
        - name: id
          in: path
          description: Scenario id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                required:
                  - scenario_status
                type: object
                properties:
                  scenario_status:
                    type: string
                    enum:
                      - loaded
                      - running
                      - finished
                      - error
    patch:
      tags:
        - scenario
      description: Starts scenario
      parameters:
        - name: id
          in: path
          description: Scenario id
          required: true
          schema:
            type: string
      requestBody:
        description: request body (as json)
        content:
          '*/*':
            schema:
              required:
                - users
              type: object
              properties:
                users:
                  type: integer
                  description: Number of users to start
        required: true
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                required:
                  - scenario
                type: object
                properties:
                  scenario:
                    type: string
                    description: started | wrong_json
      x-codegen-request-body-name: request body
  /status:
    get:
      tags:
        - status
      description: 'Gets AMOC status, whether it is running or not.'
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                required:
                  - node_status
                type: object
                properties:
                  node_status:
                    type: string
                    enum:
                      - up
                      - down
  /scenarios/upload:
    put:
      tags:
        - upload
      description: >-
        Uploads new scenario, you can run the next command to upload a file
        using curl utility


        `curl -s -H "Content-Type: text/plain" -T <filename>
        http://<amoc_host>/upload`
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          text/plain:
            schema:
              type: string
              format: binary
            example: Past module source code here!!!
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                required:
                  - compile
                type: object
                properties:
                  compile:
                    type: string
                    description: ok | Error
                    example: ok
components: {}
